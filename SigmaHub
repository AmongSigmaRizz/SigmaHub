local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Murder Mystery Script",
   LoadingTitle = "Sigma hub",
   LoadingSubtitle = "by Sigma",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "SkibidiSigmaHub"
   },
   Discord = {
      Enabled = false,
      Invite = "none", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Sigma key",
      Subtitle = "JOIN DISCORD TO GET KEY!!1!1!1",
      Note = "SENT FRIEND REQUEST TO ilovesex10 TO GET LINK1!1!11",
      FileName = "SIGMAHUBKEY", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://pastebin.com/raw/9yBuMB4v"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Player", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "You executed the script",
   Content = "HAVE FUN SIGMA",
   Duration = 5,
   Image = 13047715178,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "SIR YES SIR",
         Callback = function()
         print("The user tapped SIR YES SIR")
      end
   },
},
})

local Button = MainTab:CreateButton({
   Name = "Infinite Jump (RISKY)",
   Callback = function()
local InfiniteJumpEnabled = true
game:GetService("UserInputService").JumpRequest:connect(function()
	if InfiniteJumpEnabled then
		game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
	end
end)
local InfiniteJump = CreateButton("Infinite Jump: On", StuffFrame)
InfiniteJump.Position = UDim2.new(0,10,0,130)
InfiniteJump.Size = UDim2.new(0,150,0,30)
InfiniteJump.MouseButton1Click:connect(function()
	local state = InfiniteJump.Text:sub(string.len("Infinite Jump: ") + 1) --too lazy to count lol
	local new = state == "Off" and "On" or state == "On" and "Off"
	InfiniteJumpEnabled = new == "On"
	InfiniteJump.Text = "Infinite Jump: " .. new
end)
   end,
})

local Input = MainTab:CreateInput({
   Name = "Walkspeed",
   PlaceholderText = "1-500",
   RemoveTextAfterFocusLost = true,
   Callback = function(Text)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Text)
   end,
})

local Input = MainTab:CreateInput({
   Name = "JumpPower",
   PlaceholderText = "1-500",
   RemoveTextAfterFocusLost = true,
   Callback = function(Text)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Text)
   end,
})

local FarmSection = MainTab:CreateSection("farm")

local Toggle = MainTab:CreateToggle({
   Name = "Auto farm",
   CurrentValue = false,
   Flag = "Farm1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
    local TweenService = game:GetService("TweenService")
local parts, currentIndex, isTweening = {}, 1, false

-- Function to gather "Coin_Server" parts within the hierarchy
local function getCoinsParts()
	local normalModel = game.Workspace:WaitForChild("Normal")
	local coinContainer = normalModel:FindFirstChild("CoinContainer")

	if coinContainer then
		for _, part in ipairs(coinContainer:GetChildren()) do
			if part.Name == "Coin_Server" then
				table.insert(parts, part)
			end
		end
		print("Found " .. #parts .. " Coin_Server parts.")
	else
		warn("CoinContainer not found.")
	end
end

-- Function to tween the player to the next part
local function tweenToNextPart(player)
	local targetPart = parts[currentIndex]
	if isTweening and targetPart then
		currentIndex += 1
		local hrp = player.Character and player.Character:WaitForChild("HumanoidRootPart", 5)

		if hrp then
			print("Tweening to: " .. targetPart.Name)
			TweenService:Create(hrp, TweenInfo.new(2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {CFrame = targetPart.CFrame}):Play()
			wait(2.5)
			tweenToNextPart(player)
		else
			warn("HumanoidRootPart not found in player's character.")
		end
	else
		isTweening, currentIndex = false, 1
		print("Tweening complete or no more parts.")
	end
end

local player = game.Players.LocalPlayer
player.CharacterAdded:Connect(function(character)
	print("Character added: " .. character.Name)
	wait(1)
	getCoinsParts()
	if #parts > 0 then
		isTweening = true
		tweenToNextPart(player)
	else
		warn("No Coin_Server parts found.")
	end
end)
  end,
})
